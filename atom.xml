<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heimuya&#39;s Blog</title>
  <subtitle>寒夜立江头，携月共入眠</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kuwan.space/"/>
  <updated>2016-07-02T14:34:06.000Z</updated>
  <id>http://www.kuwan.space/</id>
  
  <author>
    <name>heimuya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>金字塔原理</title>
    <link href="http://www.kuwan.space/2016/07/02/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86/"/>
    <id>http://www.kuwan.space/2016/07/02/金字塔原理/</id>
    <published>2016-07-02T14:21:24.000Z</published>
    <updated>2016-07-02T14:34:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近学习和工作的过程中，经常发现自己的逻辑能力欠缺，无法很清晰的表达个人的观点，同时撰写的文档也是思路&lt;strong&gt;混乱&lt;/strong&gt;、&lt;strong&gt;观点不清晰&lt;/strong&gt;，无法达到要求的水准。通过知乎达人的推荐，明白目前主要就是缺失结构化思维的能力，不知如何去组织自己的论点，同时也没有形成明显的个人观点，导致思路不清晰，或者具备的观点也无法有效的表达出来。&lt;br&gt;&lt;strong&gt;结构化思维&lt;/strong&gt;有助于改善这一问题，但如何才能具备此项思维能力呢？&lt;br&gt;《&lt;strong&gt;&lt;em&gt;金字塔原理&lt;/em&gt;&lt;/strong&gt;》一书为麦肯锡咨询公司奉为经典的书籍之一，书中明确了何为结构化思维，如何去培养结构化思维的能力。作者&lt;em&gt;芭芭拉 名托&lt;/em&gt;在书中详尽的从&lt;strong&gt;思路整理&lt;/strong&gt;、&lt;strong&gt;序言撰写&lt;/strong&gt;、&lt;strong&gt;案例分析&lt;/strong&gt;、&lt;strong&gt;实战训练&lt;/strong&gt;等方面进行了说明。&lt;br&gt;近期我将仔细研究此书，并在此记录读书心得，同时也将学到的思维方案用于实战中。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习和工作的过程中，经常发现自己的逻辑能力欠缺，无法很清晰的表达个人的观点，同时撰写的文档也是思路&lt;strong&gt;混乱&lt;/strong&gt;、&lt;strong&gt;观点不清晰&lt;/strong&gt;，无法达到要求的水准。通过知乎达人的推荐，明白目前主要就是缺失结构化思维的能力，不知如何
    
    </summary>
    
    
      <category term="结构化思维" scheme="http://www.kuwan.space/tags/%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>react-native-ignite安装</title>
    <link href="http://www.kuwan.space/2016/06/30/react-native-ignite/"/>
    <id>http://www.kuwan.space/2016/06/30/react-native-ignite/</id>
    <published>2016-06-30T15:40:33.000Z</published>
    <updated>2016-06-30T15:45:06.000Z</updated>
    
    <content type="html">&lt;p&gt;在mac os系统中通过&lt;strong&gt;npm&lt;/strong&gt;安装&lt;strong&gt;react-native-ignite&lt;/strong&gt;时，会出现一个异常的错误，导致无法安装此&lt;strong&gt;&lt;em&gt;react-native&lt;/em&gt;&lt;/strong&gt;的启动包。通过对错误信息进行分析，发现问题存在于&lt;code&gt;npm i -g generator-react-native-ignite&lt;/code&gt;这个命令中，经过一番探索，目前的解决方法有两个。&lt;/p&gt;
&lt;h3 id=&quot;1-修改为ROOT用户&quot;&gt;&lt;a href=&quot;#1-修改为ROOT用户&quot; class=&quot;headerlink&quot; title=&quot;1.修改为ROOT用户&quot;&gt;&lt;/a&gt;1.修改为ROOT用户&lt;/h3&gt;&lt;p&gt;可以注销当前用户，使用ROOT用户进行登录，使用&lt;code&gt;npm install -g react-native-ignite&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&quot;2-先安装generator-react-native-ignite&quot;&gt;&lt;a href=&quot;#2-先安装generator-react-native-ignite&quot; class=&quot;headerlink&quot; title=&quot;2.先安装generator-react-native-ignite&quot;&gt;&lt;/a&gt;2.先安装generator-react-native-ignite&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;执行&lt;code&gt;sudo npm install -g generator-react-native-ignite&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;sudo npm install -g react-native-ignite&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-使用react-native-ignite（ignite-new-MyProject）过程总存在的错误&quot;&gt;&lt;a href=&quot;#3-使用react-native-ignite（ignite-new-MyProject）过程总存在的错误&quot; class=&quot;headerlink&quot; title=&quot;3.使用react-native-ignite（ignite new MyProject）过程总存在的错误&quot;&gt;&lt;/a&gt;3.使用react-native-ignite（ignite new MyProject）过程总存在的错误&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提示需要安装yo，且正常程序执行报错：使用&lt;code&gt;sudo npm i -g yo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提示确实rnpm：使用&lt;code&gt;sudo npm i -g rnpm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提示&lt;code&gt;/usr/local/lib/node_modules/generator-react-native-ignite/app/templates&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo mkdir /usr/local/lib/node_modules/generator-react-native-ignite/app/templates&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;提示&lt;code&gt;Trying to copy from a source that does not exist: /usr/local/lib/node_modules/generator-react-native-ignite/a
pp/templates/ignite-base/README.md.template&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;cd /usr/local/lib/node_modules/generator-react-native-ignite/a&lt;br&gt;pp/templates/&lt;br&gt;git clone &lt;a href=&quot;https://github.com/infinitered/ignite/tree/master/ignite-base&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/infinitered/ignite/tree/master/ignite-base&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/infinitered/ignite/issues/169#issuecomment-226799897&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;其他解决办法&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在mac os系统中通过&lt;strong&gt;npm&lt;/strong&gt;安装&lt;strong&gt;react-native-ignite&lt;/strong&gt;时，会出现一个异常的错误，导致无法安装此&lt;strong&gt;&lt;em&gt;react-native&lt;/em&gt;&lt;/strong&gt;的启动包。通过对错
    
    </summary>
    
    
      <category term="react-native" scheme="http://www.kuwan.space/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="http://www.kuwan.space/2015/10/21/demo/"/>
    <id>http://www.kuwan.space/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2016-06-30T15:25:26.000Z</updated>
    
    <content type="html">&lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。&lt;/p&gt;
&lt;h2 id=&quot;测试表格&quot;&gt;&lt;a href=&quot;#测试表格&quot; class=&quot;headerlink&quot; title=&quot;测试表格&quot;&gt;&lt;/a&gt;测试表格&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;site&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sitewide information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;page&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Page specific information and custom variables set in front-matter.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Site configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Theme configuration. Inherits from site configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_&lt;/code&gt; (single underscore)&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://lodash.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lodash&lt;/a&gt; library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path of current page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Full URL of current page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;env&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Environment variables&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;语法比较&quot;&gt;&lt;a href=&quot;#语法比较&quot; class=&quot;headerlink&quot; title=&quot;语法比较&quot;&gt;&lt;/a&gt;语法比较&lt;/h2&gt;&lt;div class=&quot;note&quot;&gt;&lt;br&gt;    &lt;h5&gt;测试标题&lt;/h5&gt;&lt;br&gt;    &lt;p&gt;在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 &lt;code&gt;min-width&lt;/code&gt;、&lt;code&gt;max-width&lt;/code&gt;、&lt;code&gt;font-size&lt;/code&gt; 和 &lt;code&gt;line-height&lt;/code&gt; 四个样式。&lt;/p&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;Map-语法&quot;&gt;&lt;a href=&quot;#Map-语法&quot; class=&quot;headerlink&quot; title=&quot;Map 语法&quot;&gt;&lt;/a&gt;Map 语法&lt;/h4&gt;&lt;p&gt;下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$breakpoint-map: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    small: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        min-width: null,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        max-width: 479px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        base-font: 16px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vertical-rhythm: 1.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    medium: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        min-width: 480px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        max-width: 959px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        base-font: 18px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vertical-rhythm: 1.414&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    large: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        min-width: 960px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        max-width: 1099px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        base-font: 18px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vertical-rhythm: 1.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    xlarge: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        min-width: 1100px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        max-width: null,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        base-font: 21px,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vertical-rhythm: 1.618&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;多重列表语法&quot;&gt;&lt;a href=&quot;#多重列表语法&quot; class=&quot;headerlink&quot; title=&quot;多重列表语法&quot;&gt;&lt;/a&gt;多重列表语法&lt;/h4&gt;&lt;p&gt;下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 &lt;code&gt;nth()&lt;/code&gt; 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$breakpoint-list: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (small, null, 479px, 16px, 1.3),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (medium, 480px, 959px, 18px, 1.414),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (large, 960px, 1099px, 18px, 1.5),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (xlarge, 1100px, null, 21px, 1.618)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;遍历比较&quot;&gt;&lt;a href=&quot;#遍历比较&quot; class=&quot;headerlink&quot; title=&quot;遍历比较&quot;&gt;&lt;/a&gt;遍历比较&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;br&gt;    &lt;h5&gt;测试标题&lt;/h5&gt;&lt;br&gt;    &lt;p&gt;从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？&lt;/p&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;遍历-Map&quot;&gt;&lt;a href=&quot;#遍历-Map&quot; class=&quot;headerlink&quot; title=&quot;遍历 Map&quot;&gt;&lt;/a&gt;遍历 Map&lt;/h4&gt;&lt;p&gt;我们可以使用如下的代码遍历 Map：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@each $label, $map in $breakpoint-map &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的变量 &lt;code&gt;$label&lt;/code&gt; 和 &lt;code&gt;$map&lt;/code&gt; 会随着对 &lt;code&gt;$breakpoint-map&lt;/code&gt; 的遍历被动态地赋值，&lt;code&gt;$label&lt;/code&gt; 将会被赋值为 &lt;code&gt;$breakpoint-map&lt;/code&gt; 的 Key，而 &lt;code&gt;$map&lt;/code&gt; 会被赋值为 &lt;code&gt;$breakpoint-map&lt;/code&gt; 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 &lt;code&gt;map-get()&lt;/code&gt; 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。&lt;/p&gt;
&lt;p&gt;具体的做法就是使用 &lt;code&gt;@each&lt;/code&gt; 遍历 Map，然后使用 &lt;code&gt;map-get()&lt;/code&gt; 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@each $label, $map in $breakpoint-map &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $min-width: map-get($map, min-width);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $max-width: map-get($map, max-width);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $base-font: map-get($map, base-font);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $vertical-rhythm: map-get($map, vertical-rhythm);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;遍历多重列表&quot;&gt;&lt;a href=&quot;#遍历多重列表&quot; class=&quot;headerlink&quot; title=&quot;遍历多重列表&quot;&gt;&lt;/a&gt;遍历多重列表&lt;/h4&gt;&lt;p&gt;遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 &lt;code&gt;map-get()&lt;/code&gt; 函数取特定值，直接遍历一遍即可获得特定值。&lt;/p&gt;
&lt;p&gt;因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 &lt;code&gt;map-get()&lt;/code&gt;，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;慎用多重列表&quot;&gt;&lt;a href=&quot;#慎用多重列表&quot; class=&quot;headerlink&quot; title=&quot;慎用多重列表&quot;&gt;&lt;/a&gt;慎用多重列表&lt;/h2&gt;&lt;div class=&quot;note warning&quot;&gt;&lt;br&gt;    &lt;h5&gt;测试标题&lt;/h5&gt;&lt;br&gt;    &lt;p&gt;经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。&lt;/p&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;遗漏键值&quot;&gt;&lt;a href=&quot;#遗漏键值&quot; class=&quot;headerlink&quot; title=&quot;遗漏键值&quot;&gt;&lt;/a&gt;遗漏键值&lt;/h4&gt;&lt;p&gt;如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$breakpoint-list: (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (small, null, 479px, 16px, 1.3),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (medium, 480px, 959px, 18px, 1.414),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (large, 960px, 1099px, 18px, 1.5),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (xlarge, 1100px, 21px, 1.618)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;p &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @if $min-width &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @include breakpoint( $min-width ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                font-size: $base-font;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                line-height: $vertical-rhythm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; @else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            font-size: $base-font;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            line-height: $vertical-rhythm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们尝试运行这段代码时，结果肯定是错误地，因为在 &lt;code&gt;$breakpoint-list&lt;/code&gt; 的最后一行，&lt;code&gt;xlarge&lt;/code&gt; 被赋值给了 &lt;code&gt;$label&lt;/code&gt;，&lt;code&gt;1100px&lt;/code&gt; 被赋值给了 &lt;code&gt;$min-width&lt;/code&gt;，&lt;code&gt;21px&lt;/code&gt; 被赋值给了 &lt;code&gt;$max-width&lt;/code&gt;, &lt;code&gt;1.618&lt;/code&gt; 被赋值给了 &lt;code&gt;$base-font&lt;/code&gt;，最终导致 &lt;code&gt;$vertical-rhythm&lt;/code&gt; 没有被赋值，结果就是 &lt;code&gt;font-size&lt;/code&gt; 的属性值是错的，&lt;code&gt;line-height&lt;/code&gt; 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。&lt;/p&gt;
&lt;p&gt;如果我们使用 Map 来代替这里的多重列表，那么使用 &lt;code&gt;map-get()&lt;/code&gt; 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。&lt;/p&gt;
&lt;h4 id=&quot;查找特定列表&quot;&gt;&lt;a href=&quot;#查找特定列表&quot; class=&quot;headerlink&quot; title=&quot;查找特定列表&quot;&gt;&lt;/a&gt;查找特定列表&lt;/h4&gt;&lt;p&gt;在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 &lt;code&gt;map-get()&lt;/code&gt; 函数可以快速定位到特定子 Map：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$medium-map: map-get($maps, medium);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果要获取多种列表 &lt;code&gt;medium&lt;/code&gt; 列表，麻烦可就大了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@function get-list($label) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @each $list in $breakpoint-list &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @if nth($list, 1) == $label &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @return $list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @return null;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$medium-list: get-list(medium);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 &lt;code&gt;null&lt;/code&gt;。这实际上就是手工实现了 &lt;code&gt;map-get()&lt;/code&gt; 的逻辑。&lt;/p&gt;
&lt;h4 id=&quot;缺少原生的-Map-函数&quot;&gt;&lt;a href=&quot;#缺少原生的-Map-函数&quot; class=&quot;headerlink&quot; title=&quot;缺少原生的 Map 函数&quot;&gt;&lt;/a&gt;缺少原生的 Map 函数&lt;/h4&gt;&lt;p&gt;Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 &lt;code&gt;map-merge()&lt;/code&gt; 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 &lt;code&gt;join()&lt;/code&gt; 或 &lt;code&gt;append()&lt;/code&gt; 来增加新列表，从而模拟出 &lt;code&gt;map-merge()&lt;/code&gt; 的效果。&lt;/p&gt;
&lt;p&gt;另一个实用的 Map 函数就是 &lt;code&gt;map-has-key()&lt;/code&gt;，对于依赖 &lt;code&gt;map-get()&lt;/code&gt; 的自定义函数来说，&lt;code&gt;map-has-key()&lt;/code&gt; 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;div class=&quot;note unreleased&quot;&gt;&lt;br&gt;    &lt;h5&gt;Test Title&lt;/h5&gt;&lt;br&gt;    &lt;p&gt;相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。&lt;/p&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://www.kuwan.space/tags/css/"/>
    
  </entry>
  
</feed>
